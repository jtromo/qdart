#!/bin/bash

# Helper functions

chromium-checked-mode () {
  DART_FLAGS=--checked open /usr/local/opt/dart/Chromium.app
}

prune-local () {
  git branch --merged master | grep -v "\master" | xargs -n 1 git branch -d
}

prune () {
  git fetch --prune origin && prune-local
}

pub-analyze () {
  pub run dart_dev analyze
}

pub-clean () {
  rm -rf .pub .packages pubspec.lock && find . -name packages | xargs rm -rf
}

pub-clean-cache () {
  rm -rf ~/.pub-cache
}

pub-copy-license () {
  pub run dart_dev copy-license
}

pub-coverage () {
  pub run dart_dev coverage
}

pub-docs () {
  pub run dart_dev docs
}

pub-examples () {
  pub run dart_dev examples
}

pub-format () {
  pub run dart_dev format
}

pub-generate-test-runner () {
  pub run dart_dev gen-test-runner
}

pub-get () {
  pub get --packages-dir
}

pub-get-package-solver () {
  pub get --packages-dir --verbosity solver | grep "inconsistent" -A 2 | sed -e "s/\ |//g"
}

pub-saucelabs () {
  pub run dart_dev saucelabs
}

pub-serve () {
  pub run dart_dev serve
}

pub-serve-dart2js () {
  pub run dart_dev serve --web-compiler=dart2js
}

pub-task-runner () {
  pub run dart_dev task-runner
}

pub-test () {
  pub run dart_dev test
}

pub-upgrade () {
  pub upgrade
}

# qdart flag functions

q-analyze () {
  echo '--- Analyzing project ---'
  pub-analyze
}

q-chromium-checked-mode () {
  echo '--- Launching chromium in checked mode ---'
  chromium-checked-mode
}

q-clean () {
  for file in $(find . -name 'pubspec.yaml' -maxdepth 4); do
    dir=${file%/*}
    echo "--- Cleaning pub dependencies in $dir ---"
    (cd $dir && pub-clean)
  done
}

q-clean-hard () {
  q-clean

  echo '--- Clearing pub cache ---'
  pub-clean-cache
}

q-copy-license () {
  echo '--- Copying LICENSE file ---'
  pub-copy-license
}

q-coverage () {
  echo '--- Collecting test coverage ---'
  pub-coverage
}

q-docs () {
  echo '--- Generating documents ---'
  pub-docs
}

q-examples () {
  echo '--- Serving examples ---'
  pub-examples
}

q-format () {
  echo '--- Formatting project ---'
  pub-format
}

q-gen-test-runner () {
  echo '--- Generating test runner ---'
  pub-generate-test-runner
}

q-get () {
  for file in $(find . -name 'pubspec.yaml' -maxdepth 4); do
    dir=${file%/*}
    echo "--- Getting pub dependencies in $dir ---"
    (cd $dir && pub-get)
  done
}

q-get-package-solver () {
  for file in $(find . -name 'pubspec.yaml' -maxdepth 4); do
    dir=${file%/*}
    echo "--- Getting/Solving pub dependencies in $dir ---"
    (cd $dir && pub-get-package-solver)
  done
}

q-prune () {
  echo '--- Pruning local branches ---'
  prune
}

q-saucelabs () {
  echo '-- Compiling tests for Sauce Labs --'
  pub-saucelabs
}

q-serve () {
  if [ -d "app" ]; then
    echo '--- Serving project in app directory ---'
    (cd app && pub-serve)
  else
    echo '--- Serving project ---'
    pub-serve
  fi
}

q-serve-dart2js () {
  if [ -d "app" ]; then
    echo '--- Serving project with dart2js in app directory ---'
    (cd app && pub-serve-dart2js)
  else
    echo '--- Serving project with dart2js ---'
    pub-serve-dart2js
  fi
}

q-task-runner () {
  echo '--- Executing task runner ---'
  pub-task-runner
}

q-test () {
  echo '--- Testing project ---'
  pub-test
}

q-upgrade () {
  for file in $(find . -name 'pubspec.yaml' -maxdepth 4); do
    dir=${file%/*}
    echo "--- Upgrading pub dependencies in $dir ---"
    (cd $dir && pub-upgrade)
  done
}

usage () {
  echo "GNU Usage"
  echo "    ./qdart [options]"
  echo
  echo "POSIX Usage"
  echo "    ./qdart -[single letter options]"
  echo
  echo "Options"
  echo "        --analyze, -a : runs the \`dartanalyzer\` over source code."
  echo "        --chromium-checked-mode : launches Chromium in checked mode using \`DART_FLAGS=--checked open /usr/local/opt/dart/Chromium.app\`."
  echo "        --clean, -c : clears out pub dependencies. Performs \`rm -rf .pub .packages pubspec.lock && find . -name packages | xargs rm -rf\`. Attempts to go into directories with pubspec.yaml files."
  echo "        --clean-hard: performs all the actions of \`--clean\` in addition to clearing pub cache with \`rm -rf ~/.pub-cache\`."
  echo "        --copy-license : copies a LICENSE file to all applicable files."
  echo "        --coverage : collects coverage over test suites (unit, integration, and functional) and generates a report. Uses the coverage package."
  echo "        --docs, d : runs the tool from the \`dartdoc\` package to generate docs."
  echo "        --examples, e : uses \`pub serve\` to serve the project examples."
  echo "        --format, -f : runs the \`dartfmt\` tool from the \`dart_style\` package over source code."
  echo "        --gen-test-runner : generates a test runner file that allows for faster test execution."
  echo "        --get, -g : runs \`pub get\` for pub dependencies. Will attempt to go into directories to find pubspec.yaml files."
  echo "        --get-package-solver : gets and identifies pub dependency issues. Will attempt to go into directories to find pubspec.yaml files."
  echo "        --help, -h : displays this usage text."
  echo "        --prune, -p : cleans up local branches after they have been merged using \`git fetch --prune origin && git branch --merged master | grep -v \"\master\" | xargs -n 1 git branch -d\`."
  echo "        --saucelabs : compiles dart unit tests that can be run in the browser and executes them on various platforms using Sauce Labs."
  echo "        --serve, -s : uses \`pub serve\` to serve the project. Attempts to go into an app directory and serve from there if available."
  echo "        --serve-dart2js : serves the project using the \`dart2js\` compilation option to work on non-Chromium browsers."
  echo "        --task-runner : uses \`task-runner\` to perform tasks found on the \`config.taskRunnerConfig\`"
  echo "        --test, -t : runs test suites (unit, integration, and functional) via the \`test\` package test runner."
  echo "        --upgrade, -u : runs \`pub upgrade\` in directories with a pubspec.yaml."
  echo
  echo "${underline}${bold}Example${normal}"
  echo "    ./qdart -gft"
  echo "    ./qdart --clean --get --serve"
  echo "    ./qdart -cgs"
  echo "    ./qdart -clean -gs"
}

options_found=0
while [ "$1" != "" ]; do
  options_found=1
  # Attempt to use GNU standard syntax
  case $1 in
    --analyze)
      q-analyze
      shift
      ;;
    --chromium-checked-mode)
      q-chromium-checked-mode
      shift
      ;;
    --clean-hard)
      q-clean-hard
      shift
      ;;
    --clean)
      q-clean
      shift
      ;;
    --copy-license)
      q-copy-license
      shift
      ;;
    --coverage)
      q-coverage
      shift
      ;;
    --docs)
      q-docs
      shift
      ;;
    --examples)
      q-examples
      shift
      ;;
    --format)
      q-format
      shift
      ;;
    --gen-test-runner)
      q-gen-test-runner
      shift
      ;;
    --get)
      q-get
      shift
      ;;
    --get-package-solver)
      q-get-package-solver
      shift
      ;;
    --help)
      usage
      shift
      ;;
    --prune)
      q-prune
      shift
      ;;
    --saucelabs)
      q-saucelabs
      shift
      ;;
    --serve)
      q-serve
      shift
      ;;
    --serve-dart2js)
      q-serve-dart2js
      shift
      ;;
    --task-runner)
      q-task-runner
      shift
      ;;
    --test)
      q-test
      shift
      ;;
    --upgrade)
      q-upgrade
      shift
      ;;
    *--*)
      # Bad GNU option
      echo "Invalid option: $1"
      usage
      exit 1
      ;;
    -*)
      # POSIX standard syntax
      while getopts :acdefghpstu- opt; do
        case $opt in
          a)
            q-analyze
            ;;
          c)
            q-clean
            ;;
          d)
            q-docs
            ;;
          e)
            q-examples
            ;;
          f)
            q-format
            ;;
          g)
            q-get
            ;;
          h)
            usage
            ;;
          p)
            q-prune
            ;;
          s)
            q-serve
            ;;
          t)
            q-test
            ;;
          u)
            q-upgrade
            ;;
          -)
            # Invalid use of '-' or GNU standard
            # option used after POSIX option
            break
            ;;
          *)
            echo "Invalid POSIX Option: -$OPTARG" >&2
            usage
            exit 1
            ;;
        esac
      done
      shift
      ;;
    *)
      echo "Invalid option: $1"
      usage
      exit 1
      ;;
  esac
done

if ((!options_found)); then
  echo -e "No arguments found\n"
  usage
fi
