#!/bin/bash

# Chromium functions
chromium-checked-mode () {
  open /usr/local/opt/dart/Chromium.app --args --checked
}

# Pub functions
ddev () {
  pub run dart_dev
}

pub-clean () {
  rm -rf .pub .packages pubspec.lock && find . -name packages | xargs rm -rf
}

pub-clean-cache () {
  rm -rf ~/.pub-cache
}

pub-generate-tests () {
  ddev gen-test-runner
}

pub-get () {
  pub get --packages-dir
}

pub-serve () {
  ddev serve
}

pub-serve-chrome () {
  ddev serve --web-compiler=dart2js
}

pub-upgrade () {
  pub upgrade
}

pub-get-solver () {
  pub get --packages-dir --verbosity=solver
}

pub-get-solver-inconsistent () {
  pub get --packages-dir --verbosity solver | grep "inconsistent" -A 2 | sed -e "s/\ |//g"
}

q-clean () {
  echo '--- Cleaning root pub dependencies ---'
  pub-clean

  if [ -d "app" ]; then
    echo '--- Cleaning app pub dependencies ---'
    (cd app && pub-clean)
  fi

  if [ -d "test/signals" ]; then
    echo '--- Cleaning signals pub dependencies ---'
    (cd test/signals && pub-clean)
  fi
}

q-clean-all () {
  echo '--- Cleaning root pub dependencies ---'
  pub-clean

  if [ -d "app" ]; then
    echo '--- Cleaning app pub dependencies ---'
    (cd app && pub-clean)
  fi

  if [ -d "test/signals" ]; then
    echo '--- Cleaning signals pub dependencies ---'
    (cd test/signals && pub-clean)
  fi

  pub-clean-cache
}

q-format () {
  echo '--- Formatting project ---'
  ddev format
}

q-get () {
  echo '--- Getting root pub dependencies ---'
  pub-get

  if [ -d "app" ]; then
    echo '--- Getting app pub dependencies ---'
    (cd app && pub-get)
  fi

  if [ -d "test/signals" ]; then
    echo '--- Getting signals pub dependencies ---'
    (cd test/signals && pub-get)
  fi
}

q-serve () {
  if [ -d "app" ]; then
    echo '--- Serving project in app directory ---'
    (cd app && pub-serve)
  else
    echo '--- Serving project ---'
    pub-serve
  fi
}

q-upgrade () {
  echo '--- Upgrading root pub dependencies ---'
  pub-upgrade

  if [ -d "app" ]; then
    echo '--- Upgrading app pub dependencies ---'
    (cd app && pub-upgrade)
  fi

  if [ -d "test/signals" ]; then
    echo '--- Upgrading signals pub dependencies ---'
    (cd test/signals && pub-upgrade)
  fi
}

usage () {
  echo "${underline}${bold}GNU Usage${normal}"
  echo "    ./qdart [options]"
  echo
  echo "${underline}${bold}POSIX Usage${normal}"
  echo "    ./qdart -[single letter options]"
  echo
  echo "${underline}${bold}Options${normal}"
  echo "                --clean, -c Clear out pub dependencies."
  echo "                --format, -f Format dart code."
  echo "                --get, -g Get pub dependencies."
  echo "                --help, -h Display this usage text."
  echo "                --serve, -s Serve pub code."
  echo "                --upgrade, -u Upgrade pub dependencies."
  echo
  echo "${underline}${bold}Example${normal}"
  echo "    ./qdart --clean --get --serve"
  echo "    ./qdart -cgs"
  echo "    ./qdart -clean -gs"
}

options_found=0
while [ "$1" != "" ]; do
  options_found=1
  # Attempt to use GNU standard syntax
  case $1 in
    --clean)
      q-clean
      shift
      ;;
    --format)
      q-format
      shift
      ;;
    --get)
      q-get
      shift
      ;;
    --help)
      usage
      shift
      ;;
    --serve)
      q-serve
      shift
      ;;
    --upgrade)
      q-upgrade
      shift
      ;;
    *--*)
      # Bad GNU option
      echo "Invalid option: $1"
      usage
      exit 1
      ;;
    -*)
      # POSIX standard syntax
      while getopts :cfghsu- opt; do
        case $opt in
          c)
            q-clean
            ;;
          f)
            q-format
            ;;
          g)
            q-get
            ;;
          h)
            usage
            ;;
          s)
            q-serve
            ;;
          u)
            q-upgrade
            ;;
          -)
            # Invalid use of '-' or GNU standard
            # option used after POSIX option
            break
            ;;
          *)
            echo "Invalid POSIX Option: -$OPTARG" >&2
            usage
            exit 1
            ;;
        esac
      done
      shift
      ;;
    *)
      echo "Invalid option: $1"
      usage
      exit 1
      ;;
  esac
done

if ((!options_found)); then
  echo -e "No arguments found\n"
  usage
fi
